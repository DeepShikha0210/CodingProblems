/* A restaurant is visited by N people . There are unique arrival times. We need to find
the minimum difference between arrival times of two differences.

[1, 5, 11, 7 , 4]

1) Brute Force O(n^2)

2) Sort(o(N^2)) and check only the adjacent indices -> O(N)

*/


> Merge sort is imp for ivide and conquer
> For interview purposes you need to have good insight about all of them.

SELECTION SORT

At every iteration choose the best element for ith position
At Oth position, we move through entire array to find smallest
i.e. min and swap operation from i to n-1
After every ith iteration, array is sorted from 0 to i
By the time you reach n-1, the array will be sorted 
 
for(i=0 ; i < n-1 ; i++)
for(j=i; j< n; j++)
min
}
swap(i , k)
}

Total number of comparisons
=n + n-1 + n-2 + _ _ _ _ _ + 2
= n(n-1)/2 -1 
= O(n^2)
Total number of swaps
=n-1
=O(n)

The swaps are important as there is lot of overhead involved in the hood.
Thus we can say it is one of the aspect in accordance to which we favor one
sorting algorithm over the other.

Insertion SORT
Inserting a card in a place in deck of cards and then shifting the rest of the 
cards.

Inversion pair is a pair(i,j) such that i<j and a[i] > a[j]
(1,4)
(2,4)
(2,3)
(3,4)


>>Global optimisation and local optimisation in greedy
>>When greedy fails:
The travelling saleman question

Arrays.sort(arr) //O(n^2) , dual pivot quick sort 
//worst for primitive datatypes
//otherwise O(nlogn)

Collections.sort() --> O(nlogn)

Merging two arrays -> (n-1) if total elements is n ---> comparisons O(n)

//Count the number of inversions in an array *DnC


DnC
>> Work on subproblems and then combine them.

JOB SCHEDULING PROBLEM
There is one machine and N jobs to do. Each job has a running time
The completion time will be the time particular job takes will running plus
 the time taken by previous jobs.
 C[i] = Time it takes to stop after starting from 0. 
 A= [3,1,2]
 C= [3,4,6]--> 13
 A'= [1,2,3]
 C'= [1,3,6]--> 10
Time will be minimised by shortest time first approach

 

